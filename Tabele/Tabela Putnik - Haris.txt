using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using MySql.Data;
using MySql.Data.MySqlClient;


namespace Put
{
    class Program
    {
        static void Main(string[] args)
        {
            string user = "Haris";
            string pass ="";
            string db = "aerodrom";
            string connectionString = "server=localhost;user="+user+";pwd="+pass+";database="+db;
            MySqlConnection con = new MySqlConnection(connectionString);
            con.Open();
            string jmb = "1111111111111"; string ime = "meho"; string prezime = "mehic";
            MySqlCommand c = new MySqlCommand("insert into putnik values ('" + ime + "','" + prezime + "')", con);
            c.ExecuteNonQuery();


            // Ucitavanje studenata u listu
            List<Putnik> putnici = new List<Putnik>();
            c = new MySqlCommand("select * from putnik", con);
            MySqlDataReader r = c.ExecuteReader();
            while (r.Read())
                putnici.Add(new Putnik(r.GetString("jmb"), r.GetString("ime"), r.GetString("prezime")));
        }
    }
}



using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using MySql.Data;
using MySql.Data.MySqlClient;

namespace Put
{
    public class Putnik
    {
        string jmb, ime, prezime;
        public Putnik(string JMB, string i, string p)
        {
            this.JMB = JMB;
            this.Ime = i;
            this.Prezime = p;
        }

        public string JMB
        {
            get
            {
                return jmb;
            }
            set
            {
                jmb = value;
            }
        }

        public string Ime
        {
            get
            {
                return ime;
            }
            set
            {
                ime = value;
            }
        }

        

        public string Prezime
        {
            get
            {
                return prezime;
            }
            set
            {
                prezime = value;
            }
        }
    }
}



using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using MySql.Data;
using MySql.Data.MySqlClient;

namespace Put
{
    public interface IDaoCrud<T>
    {
        long create(T entity);  // INSERT INTO
        T read(T entity);        // SELECT FROM WHERE ..
        T update(T entity);     // UPDATE
        void delete(T entity);  // DELETE
        T getById(int id);       // SELECT .. WHRE ID=
        List<T> getAll();        // SELECT *
        List<T> getByExample(string name, string value);  // SELECT .. WHERE name=value
    }
}



using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using MySql.Data;
using MySql.Data.MySqlClient;

namespace Put
{
    public class PutnikDAO : IDaoCrud<Putnik>
    {
        private MySqlConnection con;

        public PutnikDAO(string host, string db, string user, string pass)
        {
            string connectionString = "server=localhost;user=" + user + ";pwd=" + pass + ";database=" + db;
            con = new MySqlConnection(connectionString);
            try
            {
                con.Open();
            }
            catch (Exception e) { throw e; }
        }
        

        long IDaoCrud<Putnik>.create(Putnik entity)
        {
            throw new NotImplementedException();
        }

        public Putnik read(Putnik entity)
        {
            throw new NotImplementedException();
        }

        public Putnik update(Putnik entity)
        {
            throw new NotImplementedException();
        }

        public void delete(Putnik entity)
        {
            throw new NotImplementedException();
        }

        public Putnik getById(int id)
        {
            throw new NotImplementedException();
        }

        public List<Putnik> getAll()
        {
            throw new NotImplementedException();
        }

        public List<Putnik> getByExample(string name, string value)
        {
            throw new NotImplementedException();
        }
    }
}

